@page
@model NexenHub.Pages.VisCurModel
@{
}

<div class="display-5 text-light text-center">Curing production (today)</div>
<div class="text-center text-light">Use mouse to move around</div>

<div class="ratio ratio-16x9 w-100" style="max-height:70vh;">
    <div id="mygraph"></div>
</div>

<script type="text/javascript">
    var data = null;
    var graph = null;

    // Called when the Visualization API is loaded.
    function drawVisualization() {


        // Create and populate a data table.
        data = new vis.DataSet();

        @{
            foreach (var dv in Model.dataList)
            {
                @Html.Raw("data.add({ x:"+dv.X+ ",y:" + dv.Y + ",z:" + dv.Z + ",extra: '" + dv.Name + "' });");
            }
        }

        // specify options
        var options = {
            width: "100%",
            height: "100%",
            style: 'bar',
            showPerspective: true,
            showLegend: true,
            showGrid: true,
            showShadow: false,

            // Option tooltip can be true, false, or a function returning a string with HTML contents
            tooltip: function (point) {
                // parameter point contains properties x, y, z, and data
                // data is the original object passed to the point constructor
                return "value: <b>" + point.z + "</b><br>" + point.data.extra;
            },

            // Tooltip default styling can be overridden
            tooltipStyle: {
                content: {
                    background: "rgba(255, 255, 255, 0.7)",
                    padding: "10px",
                    borderRadius: "10px",
                },
                line: {
                    borderLeft: "1px dotted rgba(0, 0, 0, 0.5)",
                },
                dot: {
                    border: "5px solid rgba(0, 0, 0, 0.5)",
                },
            },

            keepAspectRatio: true,
            verticalRatio: 0.5,
            cameraPosition: {
                horizontal:5.5,
                vertical:0.5,
                distance:4
            }
        };

        var camera = graph ? graph.getCameraPosition() : null;

        // create our graph
        var container = document.getElementById("mygraph");
        graph = new vis.Graph3d(container, data, options);

        if (camera) graph.setCameraPosition(camera); // restore camera position

    }

    window.addEventListener("load", () => {
        drawVisualization();
    });


</script>