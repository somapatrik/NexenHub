@page
@model NexenHub.Pages.RAD.PrototypeProgressModel
@{
}

<div class="container-fluid">

    <div class="row border-2 p-2 pb-0" >
        <div class="row mb-2">
            <div class="col">
                <h4>Prototype progress</h4>
            </div>
            <div class="col text-end">
                
            </div>
        </div>

    </div>
</div>


<div class="container-fluid">
    <div class="row g-1">

        <div class="col-md-3 col-xl-2">
            <div class="card">
                <div class="card-body">
            <div class="row my-1">
                <div class="col text-end">
                    <a class="btn btn-sm btn-outline-primary" data-bs-toggle="collapse" href="#collapseFilters" role="button">
                        More filters
                    </a>
                </div>
            </div>

            <form method="post">
            <div class="collapse" id="collapseFilters">
            <div class="row">
                <div class="col">

                        <div class="form-label">EMR</div>
                        <input type="text" class="form-control text-center text-uppercase" asp-for="@Model.selectedEMR">

                        <div class="form-label">Test type</div>
                        <select class="form-control" asp-items="@Model.TestTypes" asp-for="@Model.SelectedTestType">
                            <option value=""></option>
                        </select>

                        <div class="form-label">Item ID</div>
                        <input type="text" class="form-control text-center" asp-for="@Model.selectedItemID">

                        <div class="form-label">Item name</div>
                        <input type="text" class="form-control text-center" asp-for="@Model.selectedItemName">
                        
                        <div class="mt-3 d-flex">

                            <input asp-for="@Model.IsOE" type="checkbox" class="btn-check" id="btncheck1" autocomplete="off">
                            <label class="btn btn-outline-primary flex-grow-1 m-1" for="btncheck1">OE</label>

                            <input asp-for="@Model.IsRe" type="checkbox" class="btn-check" id="btncheck2" autocomplete="off">
                                <label class="btn btn-outline-danger flex-grow-1 m-1" for="btncheck2">RE</label>

                        </div>

                </div>
            </div>
            </div>

            <div class="row">
                <div class="col">

                <div class="input-daterange">
                
                        <div class="form-label">From</div>
                        <input id="inputFrom" type="text" class="form-control" asp-for="DateFrom">

                        <div class="form-label">To</div>
                        <input id="inputTo" type="text" class="form-control" asp-for="DateTo">

                        <button class="w-100 btn btn-primary mt-3" asp-page-handler="Generate">Search</button>

                </div>

                </div>
            </div>
            </form>
            </div>
            </div>
        </div>

        <div class="col-md-9 col-xl-7">
            <div class="card">
                <div class="card-body">
                <canvas id="PrototypeChart"  />
                </div>
            </div>
        </div>

        <div class="col-xl-3">

            <div class="row mb-1">
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                    
                    <table class="table table-hover">
                        <tr>
                            <th scope="row" colspan="2" class="text-center">
                                <label id="emrDetailName">
                                    Select EMR
                                </label>
                            </th>
                        </tr>
                        <tr>
                            <th scope="row">Tire code</th>
                            <td><label id="emrDetailTireCode" /></td>
                        </tr>
                        <tr>
                            <th scope="row">Text</th>
                            <td><label id="emrDetailReqText" /></td>
                        </tr>
                        <tr>
                            <th scope="row">Requested</th>
                            <td><label id="emrDetailReqMember" /></td>
                        </tr>
                        <tr>
                            <th scope="row">Test channel</th>
                            <td><label id="emrDetailTestType" /></td>
                        </tr>
                    </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-1">
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <canvas id="EmrDetail"/>
                        </div>
                     </div>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <canvas id="EmrDefects"/>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>



<script type="text/javascript">

    $('.input-daterange').datepicker({
        weekStart: 1,
        maxViewMode: 1,
        calendarWeeks: true,
        todayHighlight: true,
        format: 'yyyy-mm-dd',
        endDate: '+0d'

    });
    
    var prodctx = document.getElementById("PrototypeChart").getContext('2d');

    var prodmyChart = new Chart(prodctx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Model.xValues),
            datasets: [
                {
                    label: 'CURE',
                    data: @Html.Raw(Model.yCUREValues),
                    backgroundColor: ['rgb(11,94,215,.7)'],
                    borderColor: ['rgba(11,94,215,0)'],
                    borderWidth: 1
                },
                {
                    label: 'TBM',
                    data: @Html.Raw(Model.yTBMValues),
                    backgroundColor: ['rgb(255,193,7,.7)'],
                    borderColor: ['rgba(255,193,7,0)'],
                    borderWidth: 1
                },
                {
                    label: 'Request',
                    data: @Html.Raw(Model.yReqValues),
                    backgroundColor: ['rgba(0, 130, 255, 0.0)'],
                    borderColor: ['rgba(0, 130, 255, 1)'],
                    borderWidth: 1
                }
                
            ]
        },
        options: {
            maintainAspectRatio: true,
            responsive: true,
            indexAxis: 'y',
            scales: {
                x: {
                    beginAtZero: true,
                    stacked: false,
                    grid: {},
                    ticks: {}
                },
                y:{
                    stacked: true,
                    grid: {},
                    ticks: {
                        callback: function(label) {
                            let realLabel = this.getLabelForValue(label);
                            return realLabel.split(";")[0];
                        }
                    }
                },
                yAxis2:
                {
                    type: "category",
                    grid: {
                        drawOnChartArea: false,
                    },
                    ticks:{
                        callback: function(label) {
                            let realLabel = this.getLabelForValue(label);
                            return realLabel.split(";")[1];;
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: true
                    ,position: 'top'
                },
                tooltip:{
                    callbacks:{
                        title: function(context){
                            return context[0].label.split(';')[0];
                        }
                    }
                },
                title:{
                    display:true,
                    text:@Html.Raw("'" + Model.ChartTitle + "'")
                }
            }
            
        }
    });

    // OnClick
    document.getElementById("PrototypeChart").onclick = function(e) {

        // Anywhere click, only return index. Can´t make it work
        //const canvasPosition = Chart.helpers.getRelativePosition(e, prodmyChart);
        //const datay = prodmyChart.scales.y.getValueForPixel(canvasPosition.y);
        //console.log("dataY: " + datay);

        // Bar click - returns EMR
        let points = prodmyChart.getElementsAtEventForMode(e, 'nearest', { intersect: true, axis: 'y' });

        if (points.length) 
        {
            const firstPoint = points[0];
            var label = prodmyChart.data.labels[firstPoint.index].split(';')[0];
            //var value = prodmyChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
            //let label = prodmyChart.scales['y'].getLabelForValue(firstPoint.index, firstPoint.datasetIndex);
            displayEMRData(label);
            displayEMR(label);
            displayEMRdefectChart(label);
        }
    };

    // Locations
    var detailctx = document.getElementById("EmrDetail").getContext('2d');
    var detailChart = new Chart(detailctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [
                {
                    label: [],
                    data: [],
                    backgroundColor: charcolors,
                        borderWidth:1
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            responsive: true,
            indexAxis: 'y',
            plugins: {
                legend: {
                    display: false,
                    position: 'left'
                },
                title: {
                    display: false,
                    text: ''
                    }
            }

        }
    });

    // Defects
    var defectsctx = document.getElementById("EmrDefects").getContext('2d');
    var defectsChart = new Chart(defectsctx,{
        type: 'bar',
        data: {
            labels: [],
            datasets: []
        },
        options: {
            maintainAspectRatio: true,
            responsive: true,
            indexAxis: 'y',
            scales: {
                x: {
                    stacked: true,
                },
                y: {
                    stacked: true,
                    }
             },
            plugins: {
                legend: {
                    display: true
                    , position: 'top'
                },
                title: {
                    display: false,
                    text: ''
                    }
            }

        }});

    var emrLocations = @Html.Raw(Model.formatLocations);
    var emrBasicData = @Html.Raw(Model.formatEMRdata);
    var emrDefectCharts = @Html.Raw(Model.formatDefectCharts);


    function displayEMRData(emr)
    {
        
        emrBasicData.forEach(emrData=>{
            if (emrData["PRD_REQ_NO"] == emr){
                document.getElementById('emrDetailName').innerText = emrData['PRD_REQ_NO'];
                document.getElementById('emrDetailReqText').innerText = emrData['REQ_TEXT'];
                document.getElementById('emrDetailReqMember').innerText = emrData['REQ_MEMBER'];
                document.getElementById('emrDetailTireCode').innerText = emrData['TIRE_CODE'];
                document.getElementById('emrDetailTestType').innerText = emrData['TEST_TYPE'];
            }

            return;
        });
    }

    function displayEMR(emr) 
    {
        emrLocations.forEach(emrData => {
            
            if (emrData['EMR'] == emr)
            {
                detailChart.options.plugins.title.text = emrData['EMR'] + ' locations';
                detailChart.data.labels = emrData["Labels"];
                detailChart.data.datasets[0].data = emrData["Values"];
                detailChart.update();

                return;
            }

        });
    }

    function displayEMRdefectChart(emr)
    {
        // Remove old data
        var del = defectsChart.data.datasets.length;
        for (var i = 0; i <= del; i++) {
            defectsChart.data.datasets.pop();
        }

        defectsChart.update();

        emrDefectCharts.forEach(emrData =>{

            if (emrData["EMR"] == emr){

                // Title
                defectsChart.options.plugins.title.text = emrData['EMR'] + ' defects';

                // Labels
                defectsChart.data.labels = emrData["Labels"];

                var j = 0;
                // Add new datasets
                emrData.DataSets.forEach(ds => {
                    const newDataset = {
                        label: ds['Label'],
                        data: ds['Data'],
                        backgroundColor: charcolors[j]
                    };

                    j++;

                    defectsChart.data.datasets.push(newDataset);
                    defectsChart.update();
                });

                return;
            }

        });
    }

</script>