@page
@model NexenHub.Pages.RAD.PrototypeProgressModel
@{
}

<div class="container-fluid">

    <form method="post">

        <div class="row my-2">
            <div class="col-auto">
                <h4>Prototype progress</h4>
            </div>

            <div class="col">
                <div class="collapse" id="collapseFilters">
                <div class="input-group">
                    <div class="input-group-text">EMR</div>
                    <input type="text" class="form-control text-center text-uppercase" asp-for="@Model.selectedEMR">

                    <div class="input-group-text">Test type</div>
                    <select class="form-control" asp-items="@Model.TestTypes" asp-for="@Model.SelectedTestType">
                        <option value=""></option>
                    </select>

                    <div class="input-group-text">Item ID</div>
                    <input type="text" class="form-control text-center" asp-for="@Model.selectedItemID">

                    <div class="input-group-text">Item name</div>
                    <input type="text" class="form-control text-center" asp-for="@Model.selectedItemName">

                    <input asp-for="@Model.IsOE" type="checkbox" class="btn-check" id="btncheck1" autocomplete="off">
                    <label class="btn btn-outline-primary" for="btncheck1">OE</label>

                    <input asp-for="@Model.IsRe" type="checkbox" class="btn-check" id="btncheck2" autocomplete="off">
                    <label class="btn btn-outline-danger " for="btncheck2">RE</label>
                </div>
                </div>
            </div>

            <div class="col-lg-1">
                <a class="btn btn-outline-primary form-control flex-shrink-1" data-bs-toggle="collapse" href="#collapseFilters" role="button">
                    More filters
                </a>
            </div>

        </div>
        
            <div class="row mb-1 justify-content-center">

                <div class="col-xl-6">

                <div class="input-daterange">

                    <div class="input-group">
                        <div class="input-group-text">From</div>
                        <input id="inputFrom" type="text" class="form-control" asp-for="DateFrom">
                        <div class="input-group-text">To</div>
                        <input id="inputTo" type="text" class="form-control" asp-for="DateTo">
                        <button class="btn btn-primary form-control" asp-page-handler="Generate">Search</button>
                        
                    </div>

                </div>

            </div>

            </div>
    </form>

</div>


<div class="container-fluid">
    <div class="row g-1">

        <div class="col-xl-9">
            <div class="row">
                <div class="col">
                    <div class="card">
                        <div class="card-body">
                            <canvas id="PrototypeChart"  />
                       </div>
                    </div>
                </div>
            </div>


        </div>

        <div class="col-xl-3">

            <div class="row">

                <div class="col">

                    <div class="card mb-1">
                        <div class="card-body">
                    
                            <table class="table table-hover">
                                <tr>
                                    <th scope="row" colspan="2" class="text-center">
                                        <label id="emrDetailName">
                                            Select EMR
                                        </label>
                                    </th>
                                </tr>
                                <tr>
                                    <th scope="row">Tire code</th>
                                    <td><label id="emrDetailTireCode" /></td>
                                </tr>
                                <tr>
                                    <th scope="row">Text</th>
                                    <td><label id="emrDetailReqText" /></td>
                                </tr>
                                <tr>
                                    <th scope="row">Requested</th>
                                    <td><label id="emrDetailReqMember" /></td>
                                </tr>
                                <tr>
                                    <th scope="row">Test channel</th>
                                    <td><label id="emrDetailTestType" /></td>
                                </tr>
                            </table>

                        </div>
                    </div>

                    <div class="card mb-1">

                        <div class="card-body">
                            <canvas id="EmrDetail" />
                        </div>
                    </div>

                    <div class="card mb-1">
                        <div class="card-body">
                            <canvas id="EmrDefects" />
                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>
</div>



<script type="text/javascript">

    $('.input-daterange').datepicker({
        weekStart: 1,
        maxViewMode: 1,
        calendarWeeks: true,
        todayHighlight: true,
        format: 'yyyy-mm-dd'
    });
    
    var prodctx = document.getElementById("PrototypeChart").getContext('2d');

    var prodmyChart = new Chart(prodctx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Model.xValues),
            datasets: [
                {
                    label: 'CURE',
                    data: @Html.Raw(Model.yCUREValues),
                    backgroundColor: ['rgb(11,94,215,.7)'],
                    borderColor: ['rgba(11,94,215,0)'],
                    borderWidth: 1
                },
                {
                    label: 'TBM',
                    data: @Html.Raw(Model.yTBMValues),
                    backgroundColor: ['rgb(255,193,7,.7)'],
                    borderColor: ['rgba(255,193,7,0)'],
                    borderWidth: 1
                },
                {
                    label: 'Request',
                    data: @Html.Raw(Model.yReqValues),
                    backgroundColor: ['rgba(0, 130, 255, 0.0)'],
                    borderColor: ['rgba(0, 130, 255, 1)'],
                    borderWidth: 1
                }
                
            ]
        },
        options: {
            maintainAspectRatio: true,
            responsive: true,
            indexAxis: 'y',
            scales: {
                x: {
                    beginAtZero: true,
                    stacked: false,
                    grid: {},
                    ticks: {}
                },
                y:{
                    stacked: true,
                    grid: {},
                    ticks: {
                        autoSkip: false,
                        callback: function(label) {
                            let realLabel = this.getLabelForValue(label);
                            return realLabel.split(";")[0];
                        }
                    }
                },
                yAxis2:
                {
                    type: "category",
                    grid: {
                        drawOnChartArea: false,
                    },
                    ticks:{
                        callback: function(label) {
                            let realLabel = this.getLabelForValue(label);
                            return realLabel.split(";")[1];;
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    display: true
                    ,position: 'top'
                },
                tooltip:{
                    callbacks:{
                        title: function(context){
                            return context[0].label.split(';')[0];
                        }
                    }
                },
                title:{
                    display:true,
                    text:@Html.Raw("'" + Model.ChartTitle + "'")
                }
            }
            
        }
    });

    // BarClick
    document.getElementById("PrototypeChart").onclick = async function(e) {

        let points = prodmyChart.getElementsAtEventForMode(e, 'nearest', { intersect: true, axis: 'y' });

        if (points.length) 
        {
            const firstPoint = points[0];
            var label = prodmyChart.data.labels[firstPoint.index].split(';')[0];

           // await (()=> ResetCharts());

            displayEMRData(label);
            
            await GetEmrLocation(label);
            await GetEmrVerDefects(label);
        }
    };

    // Locations
    var detailctx = document.getElementById("EmrDetail").getContext('2d');
    var detailChart = new Chart(detailctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [
                {
                    label: [],
                    data: [],
                    backgroundColor: charcolors,
                        borderWidth:1
                }
            ]
        },
        options: {
            maintainAspectRatio: false,
            responsive: true,
            indexAxis: 'y',
            plugins: {
                legend: {
                    display: false,
                    position: 'left'
                },
                title: {
                    display: false,
                    text: ''
                    }
            }

        }
    });

    // Defects
    var defectsctx = document.getElementById("EmrDefects").getContext('2d');
    var defectsChart = new Chart(defectsctx,{
        type: 'bar',
        data: {
            labels: [],
            datasets: []
        },
        options: {
            maintainAspectRatio: true,
            responsive: true,
            indexAxis: 'y',
            scales: {
                x: {
                    stacked: true,
                },
                y: {
                    stacked: true,
                    }
             },
            plugins: {
                legend: {
                    display: true
                    , position: 'top'
                },
                title: {
                    display: false,
                    text: ''
                    }
            }

        }});

    var emrBasicData = @Html.Raw(Model.formatEMRdata);


    function displayEMRData(emr)
    {
        
        emrBasicData.forEach(emrData=>{
            if (emrData["PRD_REQ_NO"] == emr){
                document.getElementById('emrDetailName').innerText = emrData['PRD_REQ_NO'];
                document.getElementById('emrDetailReqText').innerText = emrData['REQ_TEXT'];
                document.getElementById('emrDetailReqMember').innerText = emrData['REQ_MEMBER'];
                document.getElementById('emrDetailTireCode').innerText = emrData['TIRE_CODE'];
                document.getElementById('emrDetailTestType').innerText = emrData['TEST_TYPE'];
            }

            return;
        });
    }

    function displayEMRdefectChart(emr)
    {
        // Remove old data
        var del = defectsChart.data.datasets.length;
        for (var i = 0; i <= del; i++) {
            defectsChart.data.datasets.pop();
        }

        // Remove old labels
        defectsChart.data.labels = [];
        defectsChart.update();


        // Labels
        defectsChart.data.labels = emr["Labels"];

        var j = 0;
        // Add new datasets
        emr.DataSets.forEach(ds => {
            const newDataset = {
                label: ds['Label'],
                data: ds['Data'],
                backgroundColor: charcolors[j]
            };

            j++;

            defectsChart.data.datasets.push(newDataset);
            defectsChart.update();
        });


    }

    async function GetEmrVerDefects(emr){
        
        await fetch(window.location.origin + '/API/rad/EmrVerDefects/' + emr)
            .then(response => response.json())
            .then(data => displayEMRdefectChart(data));
    }

    // Emr locations
    async function GetEmrLocation(emr) 
    {
        await fetch( window.location.origin +'/API/rad/EmrLocation/' + emr)
                .then(response => response.json())
            .then(data => displayEMRLocation(data));
    }

    function displayEMRLocation(emrLocation) 
    {
        detailChart.data.labels = emrLocation["Labels"];
        detailChart.data.datasets[0].data = emrLocation["Values"];
        detailChart.update();
    }

    function ResetCharts()
    {
        // Remove old data
        //var del = detailChart.data.datasets.length;
        //for (var i = 0; i <= del; i++) {
            detailChart.data.datasets.pop();
        //}

        // Remove old labels
        detailChart.data.labels = [];
        detailChart.update();
    }



</script>