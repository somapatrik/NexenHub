@model NexenHub.ViewModels.InputPositionsViewModel
@{
}

<div class="card">
    <div class="card-body">
        <h5>Input positions</h5>
        <div class="table-responsive">
    <table class="table table-hover table-borderless table-sm text-center small">
        <tbody>

            @foreach (var inputPosition in Model.InputPositions)
            {

            <tr class="text-center">

                <td class="text-start">
                    <div>@inputPosition.IO_POSID</div>
                </td>

                <td>
                    <div>
                        <a id="@Html.Raw("href_" + inputPosition.IO_POSID)" class="link-primary" href="#" target="_blank">
                            <span id="@Html.Raw("lotId_" + inputPosition.IO_POSID)"></span>
                        </a>
                    </div>
                </td>

                <td>
                    <div><span id="@Html.Raw("cartId_" + inputPosition.IO_POSID)"></span></div>
                </td>

                <td>
                   <div><span id="@Html.Raw("itemId_" + inputPosition.IO_POSID)"></span></div>
                </td>

                <td>
                   <div><span id="@Html.Raw("itemName_" + inputPosition.IO_POSID)"></span></div>
                </td>
                                
            </tr>
            }
                    
        </tbody>
    </table>
    </div>
    </div>
</div>
<script src="~/js/inputPositions.js"></script>

<script defer type="text/javascript">

    var EQ_ID = @Model.EQ_ID;

    document.addEventListener('readystatechange', event => {
        switch (document.readyState) {
            case "loading":
                break;
            case "interactive":
                refreshInputPositions();
                break;
            case "complete":
                setInterval(refreshInputPositions, 60000);
                break;
        }
    });



    async function refreshInputPositions() 
    {
        await getInputPositions(EQ_ID).then(async data => await displayUsedMaterial(data));
    }


    async function displayUsedMaterial(data) 
    {

        data.forEach(material => 
        {

            try 
            {
                var cartElement = document.getElementById('cartId_' + material.IO_POSID);
                var lotElement = document.getElementById('lotId_' + material.IO_POSID);
                var lotHref = document.getElementById('href_' + material.IO_POSID)

                if (material['CART_INYN'] == 'Y') 
                {
                    cartElement.innerHTML = ' ' + material['CART_ID'];
                    lotElement.innerHTML =  '' + material['LOT_ID'];
                    lotHref.setAttribute('href', window.location.origin+'/lot/' + material['LOT_ID']);
                    displayItemInfo(material['LOT_ID'], material.IO_POSID);
                }
                else 
                {
                    cartElement.innerHTML = '';
                    lotElement.innerHTML = '';
                    lotHref.setAttribute('href', '');
                    displayItemInfo('', material.IO_POSID);
                }
            } catch { }

        });

    }

    async function displayItemInfo(lot, io_posid)
    {
        var itemElement = document.getElementById('itemId_' + io_posid);
        var itemNameElement = document.getElementById('itemName_' + io_posid);
        var itemName = '';
        var itemId = '';
        
        if (lot != '')
        {
            var lotitem = await getInputItem(lot);
            itemId = lotitem.ID;
            itemName = lotitem.Name;
        }

        itemElement.innerHTML = itemId;
        itemNameElement.innerHTML = itemName;
    }

</script>
